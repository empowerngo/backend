# TODO
# - Enhance Policies for each lambda function
# - Nested template.yml structure [https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-nested-applications.html]
# - Solar linter for build process

AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  khana-backend

Parameters:
  DBHOST:
    Description: ""
    Type: "String"
    Default: "dms.c5g64064s955.ap-south-1.rds.amazonaws.com"
  DBNAME:
    Description: ""
    Type: "String"
    Default: "dmsdatabase"
  DBUSER:
    Description: ""
    Type: "String"
    Default: "dmsdatabase"
  DBPASSWORD:
    Description: ""
    Type: "String"
    Default: "teamtech#2k25"
  DBPORT:
    Description: ""
    Type: "String"
    Default: "3306"
  


# Parameters:
#   DBHOST:
#     Description: ""
#     Type: "String"
#     Default: "ka-devops.crqw00kkqjni.ap-south-1.rds.amazonaws.com"
#   DBNAME:
#     Description: ""
#     Type: "String"
#     Default: "khana_prod"
#   DBUSER:
#     Description: ""
#     Type: "String"
#     Default: "kaprod"
#   DBPASSWORD:
#     Description: ""
#     Type: "String"
#     Default: "Khana2020"
#   DBPORT:
#     Description: ""
#     Type: "String"
#     Default: "3306"
#   SMSKEY:
#     Description: ""
#     Type: "String"
#     Default: "e2b658cd81f940afa781b043878a21da"
#   SMSHEADER:
#     Description: ""
#     Type: "String"
#     Default: "ea2a110e707044d7875e536624e75a95"
#   SMSURL:
#     Description: ""
#     Type: "String"
#     Default: "http://sms.pearlsms.com/public/sms/sendjson"


Globals:
  # Api:
  #   Auth:
  #     AddDefaultAuthorizerToCorsPreflight: false
  #     DefailtAuthorizer: RequestAuthorizer
  #     Authorizers:
  #       RequestAuthorizer:
  #         FunctionPayloadType: REQUEST
  #         FunctionArn: !GetAtt ka-authorizer-function.Arn
  #         Identity:
  #           ReauthorizeEvery: 0
    # Cors:
    #   AllowMethods: "'GET,POST,OPTIONS'"
    #   AlloweHeaders: "'*'"
    #   AllowOrigin: "'*'"
    #   AllowCredentials: "'*'"
    # GatewayResponses:
    #   DEFAULT_4XX:
    #     ResponseParameters:
    #       Headers:
    #         Access-Control-Allow-Menthods: "'GET,POST,OPTIONS'"          
    #         Access-Control-Allow-Headers: "'*'"
    #         Access-Control-Allow-Origin: "'*'"
    #         Access-Control-Allow-Credentials: "'*'"
    #   DEFAULT_5XX:
    #     ResponseParameters:
    #       Headers:
    #         Access-Control-Allow-Menthods: "'GET,POST,OPTIONS'"          
    #         Access-Control-Allow-Headers: "'*'"
    #         Access-Control-Allow-Origin: "'*'"
    #         Access-Control-Allow-Credentials: "'*'"

  Api:
    Cors:
      AllowHeaders: "'*'"
      AllowMethods: "'GET,POST, PUT, OPTIONS'" 
      AllowOrigin: "'*'"  


  Function:
    Environment:
      Variables:
        DB_HOST: !Ref DBHOST
        DB_NAME: !Ref DBNAME
        DB_USER: !Ref DBUSER
        DB_PASSWORD: !Ref DBPASSWORD
        DB_PORT: !Ref DBPORT
        EMAIL_USER: "teamtech993@gmail.com"         # Email address for sending emails
        EMAIL_PASS: "Tech@2468"         # App-specific password or email account password
        ADMIN_EMAIL: "jeeva7777@gmail.com"       # Admin email to receive notifications
        EMAIL_SERVICE: "gmail"                    # Email service (e.g., Gmail, Outlook, etc.)
        NODE_ENV: "test" 
        LIMIT: 20
    Runtime: nodejs18.x
    MemorySize: 256
    Timeout: 60
    Layers:
      - !Ref CommonLayer
Resources:
  lambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ssm:GetParameter
                Resource: "arn:aws:ssm:ap-south-1:509399613408:parameter/emp-backend/jwt-secret"


  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-layer
      Description: Code shared across all lambda functions
      ContentUri: src/layers/common-layer
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile

 
    
  manageDonor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageDonor
      Handler: index.handler
      FunctionName: manageDonor
      Description: "A lambda to add donor."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/manageDonor"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  manageNGO:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageNGO
      Handler: index.handler
      FunctionName: manageNGO
      Description: "A lambda to manage NGO (add/Update)"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/manageNGO"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  manageProject:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageProject
      Handler: index.handler
      FunctionName: manageProject
      Description: "A lambda to manage NGO Project (add/Update)"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/manageProject"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  managePurpose:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/managePurpose
      Handler: index.handler
      FunctionName: managePurpose
      Description: "A lambda to manage NGO managePurpose (add/Update)"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/managePurpose"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  manageLeads:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageLeads
      Handler: index.handler
      FunctionName: manageLeads
      Description: "A lambda to handle contact Leads."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/manageLeads"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  manageUserRegistration:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageUserRegistration
      Handler: index.handler
      FunctionName: manageUserRegistration
      Description: "A lambda to handle register users."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/manageUserRegistration"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  retrieveUsersInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveUsersInfo
      Handler: index.handler
      FunctionName: retrieveUsersInfo
      Description: "A lambda to fetch users lists and details."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/retrieveUsersInfo"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  retrieveNGOInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveNGOInfo
      Handler: index.handler
      FunctionName: retrieveNGOInfo
      Description: "A lambda to fetch NGO list and info."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/retrieveNGOInfo"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"                  
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  manageDonations:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageDonations
      Handler: index.handler
      FunctionName: manageDonations
      Description: "A lambda to add or update donations."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/manageDonations"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  userSignIn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/userSignIn
      Handler: index.handler
      FunctionName: userSignIn
      Description: "A lambda to handle user sign in."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/userSignIn"
            Method: POST            
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"                  
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  
  # retrieveReceiptData:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: src/handlers/retrieveReceiptData
  #     Handler: index.handler
  #     FunctionName: retrieveReceiptData
  #     Description: "A lambda to fetch Receipt Data."
  #     Role: !GetAtt lambdaExecutionRole.Arn
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: "/retrieveReceiptData"
  #           Method: POST
  #     Environment:
  #       Variables:
  #         JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
  #     # Layers:
  #     #  - !Ref CommonCodeLayer
  #   Metadata:
  #     BuildMethod: nodejs18.x

  manageSubsPackage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageSubsPackage
      Handler: index.handler
      FunctionName: manageSubsPackage
      Description: "A lambda to handle subscription Plan."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/manageSubsPackage"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x 

  retrieveSubsPackages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveSubsPackages
      Handler: index.handler
      FunctionName: retrieveSubsPackages
      Description: "A lambda to handle subscription Plan."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/retrieveSubsPackages"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  retrieveDonorInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveDonorInfo
      Handler: index.handler
      FunctionName: retrieveDonorInfo
      Description: "A lambda to handle subscription Plan."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/retrieveDonorInfo"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  importStatement:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/importStatement
      Handler: index.handler
      FunctionName: importStatement
      Description: "A lambda to handle subscription Plan."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/importStatement"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  retrieveStatementData:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveStatementData
      Handler: index.handler
      FunctionName: retrieveStatementData
      Description: "A lambda to handle subscription Plan."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/retrieveStatementData"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  retrieveDonations:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveDonations
      Handler: index.handler
      FunctionName: retrieveDonations
      Description: "A lambda to fetch Donations records."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/retrieveDonations"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  sendEmail:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/sendEmail
      Handler: index.handler
      FunctionName: sendEmail
      Description: "A lambda to fetch Donations records."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/sendEmail"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
          SMTP_USER: "support@empowerngo.com"
          SMTP_PASS: "EmpTech#25"            
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  retrieveForm10BDData:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveForm10BDData
      Handler: index.handler
      FunctionName: retrieveForm10BDData
      Description: "A lambda to fetch form 10BD data records."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/retrieveForm10BDData"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"                    
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

  retrieveDashBoardData:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveDashBoardData
      Handler: index.handler
      FunctionName: retrieveDashBoardData
      Description: "A lambda to fetch dashboard Data."
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/retrieveDashBoardData"
            Method: POST
      Environment:
        Variables:
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"                    
      # Layers:
      #  - !Ref CommonCodeLayer
    Metadata:
      BuildMethod: nodejs18.x

