AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  khana-backend-unified - Single API with /stage and /prod paths

Parameters:
  StageDBUserName:
    Description: "Stage database username"
    Type: "String"
    Default: "stageusr"
    NoEcho: false
  StageDBPassword:
    Description: "Stage database password"
    Type: "String"
    Default: "StagePass2025!"
    NoEcho: true
  ProdDBUserName:
    Description: "Production database username"
    Type: "String"
    Default: "produsr"
    NoEcho: false
  ProdDBPassword:
    Description: "Production database password"
    Type: "String"
    Default: "ProdPass2025!"
    NoEcho: true
  SMSKEY:
    Description: ""
    Type: "String"
    Default: "e2b658cd81f940afa781b043878a21da"
  SMSHEADER:
    Description: ""
    Type: "String"
    Default: "ea2a110e707044d7875e536624e75a95"
  SMSURL:
    Description: ""
    Type: "String"
    Default: "http://sms.pearlsms.com/public/sms/sendjson"

Globals:
  Api:
    Cors:
      AllowHeaders: "'*'"
      AllowMethods: "'GET,POST, PUT, OPTIONS'"
      AllowOrigin: "'*'"

Resources:
  # Stage RDS Database
  StageDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: emp-backend-stage-db-uni-1751365483
      DBName: empbackendstage
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: "8.0.35"
      MasterUsername: !Ref StageDBUserName
      MasterUserPassword: !Ref StageDBPassword
      AllocatedStorage: 20
      StorageType: gp2
      PubliclyAccessible: true
      BackupRetentionPeriod: 7
      DeletionProtection: true
      StorageEncrypted: true
      Tags:
        - Key: Environment
          Value: stage
        - Key: Name
          Value: emp-backend-stage-database

  # Production RDS Database
  ProductionDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: emp-backend-prod-db-uni-1751365483
      DBName: empbackendprod
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: "8.0.35"
      MasterUsername: !Ref ProdDBUserName
      MasterUserPassword: !Ref ProdDBPassword
      AllocatedStorage: 20
      StorageType: gp2
      BackupRetentionPeriod: 7
      PubliclyAccessible: true
      DeletionProtection: true
      StorageEncrypted: true
      MultiAZ: false
      Tags:
        - Key: Environment
          Value: prod
        - Key: Name
          Value: emp-backend-prod-database

  # IAM Role for Lambda
  lambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "emp-backend-unified-lambda-role"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - "arn:aws:ssm:ap-south-1:*:parameter/emp-backend/*"

  # Common Layer
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: "common-layer-unified"
      Description: Code shared across all lambda functions
      ContentUri: src/layers/common-layer
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile

  # manageDonor - Stage Environment
  manageDonorStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageDonor
      Handler: index.handler
      FunctionName: "manageDonor-stage"
      Description: "manageDonor - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 60
      MemorySize: 512
      Layers:
        - !Ref CommonLayer
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/manageDonor"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          JWT_SECRET_PARAM: "/emp-backend/stage/jwt-secret"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageDonor - Production Environment
  manageDonorProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageDonor
      Handler: index.handler
      FunctionName: "manageDonor-prod"
      Description: "manageDonor - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/manageDonor"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageNGO - Stage Environment
  manageNGOStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageNGO
      Handler: index.handler
      FunctionName: "manageNGO-stage"
      Description: "manageNGO - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/manageNGO"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageNGO - Production Environment
  manageNGOProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageNGO
      Handler: index.handler
      FunctionName: "manageNGO-prod"
      Description: "manageNGO - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/manageNGO"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageProject - Stage Environment
  manageProjectStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageProject
      Handler: index.handler
      FunctionName: "manageProject-stage"
      Description: "manageProject - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/manageProject"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageProject - Production Environment
  manageProjectProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageProject
      Handler: index.handler
      FunctionName: "manageProject-prod"
      Description: "manageProject - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/manageProject"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # managePurpose - Stage Environment
  managePurposeStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/managePurpose
      Handler: index.handler
      FunctionName: "managePurpose-stage"
      Description: "managePurpose - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/managePurpose"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # managePurpose - Production Environment
  managePurposeProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/managePurpose
      Handler: index.handler
      FunctionName: "managePurpose-prod"
      Description: "managePurpose - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/managePurpose"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageLeads - Stage Environment
  manageLeadsStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageLeads
      Handler: index.handler
      FunctionName: "manageLeads-stage"
      Description: "manageLeads - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/manageLeads"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageLeads - Production Environment
  manageLeadsProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageLeads
      Handler: index.handler
      FunctionName: "manageLeads-prod"
      Description: "manageLeads - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/manageLeads"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageUserRegistration - Stage Environment
  manageUserRegistrationStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageUserRegistration
      Handler: index.handler
      FunctionName: "manageUserRegistration-stage"
      Description: "manageUserRegistration - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/manageUserRegistration"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageUserRegistration - Production Environment
  manageUserRegistrationProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageUserRegistration
      Handler: index.handler
      FunctionName: "manageUserRegistration-prod"
      Description: "manageUserRegistration - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/manageUserRegistration"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveUsersInfo - Stage Environment
  retrieveUsersInfoStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveUsersInfo
      Handler: index.handler
      FunctionName: "retrieveUsersInfo-stage"
      Description: "retrieveUsersInfo - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/retrieveUsersInfo"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveUsersInfo - Production Environment
  retrieveUsersInfoProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveUsersInfo
      Handler: index.handler
      FunctionName: "retrieveUsersInfo-prod"
      Description: "retrieveUsersInfo - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/retrieveUsersInfo"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveNGOInfo - Stage Environment
  retrieveNGOInfoStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveNGOInfo
      Handler: index.handler
      FunctionName: "retrieveNGOInfo-stage"
      Description: "retrieveNGOInfo - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/retrieveNGOInfo"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveNGOInfo - Production Environment
  retrieveNGOInfoProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveNGOInfo
      Handler: index.handler
      FunctionName: "retrieveNGOInfo-prod"
      Description: "retrieveNGOInfo - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/retrieveNGOInfo"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageDonations - Stage Environment
  manageDonationsStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageDonations
      Handler: index.handler
      FunctionName: "manageDonations-stage"
      Description: "manageDonations - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/manageDonations"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageDonations - Production Environment
  manageDonationsProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageDonations
      Handler: index.handler
      FunctionName: "manageDonations-prod"
      Description: "manageDonations - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/manageDonations"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # userSignIn - Stage Environment
  userSignInStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/userSignIn
      Handler: index.handler
      FunctionName: "userSignIn-stage"
      Description: "userSignIn - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/userSignIn"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # userSignIn - Production Environment
  userSignInProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/userSignIn
      Handler: index.handler
      FunctionName: "userSignIn-prod"
      Description: "userSignIn - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/userSignIn"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageSubsPackage - Stage Environment
  manageSubsPackageStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageSubsPackage
      Handler: index.handler
      FunctionName: "manageSubsPackage-stage"
      Description: "manageSubsPackage - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/manageSubsPackage"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # manageSubsPackage - Production Environment
  manageSubsPackageProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/manageSubsPackage
      Handler: index.handler
      FunctionName: "manageSubsPackage-prod"
      Description: "manageSubsPackage - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/manageSubsPackage"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveSubsPackages - Stage Environment
  retrieveSubsPackagesStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveSubsPackages
      Handler: index.handler
      FunctionName: "retrieveSubsPackages-stage"
      Description: "retrieveSubsPackages - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/retrieveSubsPackages"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveSubsPackages - Production Environment
  retrieveSubsPackagesProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveSubsPackages
      Handler: index.handler
      FunctionName: "retrieveSubsPackages-prod"
      Description: "retrieveSubsPackages - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/retrieveSubsPackages"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveDonorInfo - Stage Environment
  retrieveDonorInfoStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveDonorInfo
      Handler: index.handler
      FunctionName: "retrieveDonorInfo-stage"
      Description: "retrieveDonorInfo - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/retrieveDonorInfo"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveDonorInfo - Production Environment
  retrieveDonorInfoProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveDonorInfo
      Handler: index.handler
      FunctionName: "retrieveDonorInfo-prod"
      Description: "retrieveDonorInfo - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/retrieveDonorInfo"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # importStatement - Stage Environment
  importStatementStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/importStatement
      Handler: index.handler
      FunctionName: "importStatement-stage"
      Description: "importStatement - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/importStatement"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # importStatement - Production Environment
  importStatementProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/importStatement
      Handler: index.handler
      FunctionName: "importStatement-prod"
      Description: "importStatement - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/importStatement"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveStatementData - Stage Environment
  retrieveStatementDataStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveStatementData
      Handler: index.handler
      FunctionName: "retrieveStatementData-stage"
      Description: "retrieveStatementData - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/retrieveStatementData"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveStatementData - Production Environment
  retrieveStatementDataProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveStatementData
      Handler: index.handler
      FunctionName: "retrieveStatementData-prod"
      Description: "retrieveStatementData - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/retrieveStatementData"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveDonations - Stage Environment
  retrieveDonationsStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveDonations
      Handler: index.handler
      FunctionName: "retrieveDonations-stage"
      Description: "retrieveDonations - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/retrieveDonations"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveDonations - Production Environment
  retrieveDonationsProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveDonations
      Handler: index.handler
      FunctionName: "retrieveDonations-prod"
      Description: "retrieveDonations - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/retrieveDonations"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # sendEmail - Stage Environment
  sendEmailStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/sendEmail
      Handler: index.handler
      FunctionName: "sendEmail-stage"
      Description: "sendEmail - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/sendEmail"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
          SMTP_USER: "support@empowerngo.com"
          SMTP_PASS: "EmpTech#25"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # sendEmail - Production Environment
  sendEmailProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/sendEmail
      Handler: index.handler
      FunctionName: "sendEmail-prod"
      Description: "sendEmail - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/sendEmail"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
          SMTP_USER: "support@empowerngo.com"
          SMTP_PASS: "EmpTech#25"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveForm10BDData - Stage Environment
  retrieveForm10BDDataStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveForm10BDData
      Handler: index.handler
      FunctionName: "retrieveForm10BDData-stage"
      Description: "retrieveForm10BDData - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/retrieveForm10BDData"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveForm10BDData - Production Environment
  retrieveForm10BDDataProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveForm10BDData
      Handler: index.handler
      FunctionName: "retrieveForm10BDData-prod"
      Description: "retrieveForm10BDData - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/retrieveForm10BDData"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveDashBoardData - Stage Environment
  retrieveDashBoardDataStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveDashBoardData
      Handler: index.handler
      FunctionName: "retrieveDashBoardData-stage"
      Description: "retrieveDashBoardData - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/retrieveDashBoardData"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveDashBoardData - Production Environment
  retrieveDashBoardDataProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveDashBoardData
      Handler: index.handler
      FunctionName: "retrieveDashBoardData-prod"
      Description: "retrieveDashBoardData - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/retrieveDashBoardData"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveUsageNPlanInfo - Stage Environment
  retrieveUsageNPlanInfoStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveUsageNPlanInfo
      Handler: index.handler
      FunctionName: "retrieveUsageNPlanInfo-stage"
      Description: "retrieveUsageNPlanInfo - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/retrieveUsageNPlanInfo"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # retrieveUsageNPlanInfo - Production Environment
  retrieveUsageNPlanInfoProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/retrieveUsageNPlanInfo
      Handler: index.handler
      FunctionName: "retrieveUsageNPlanInfo-prod"
      Description: "retrieveUsageNPlanInfo - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/retrieveUsageNPlanInfo"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/jwt-secret"
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref CommonLayer
    Metadata:
      BuildMethod: nodejs18.x

  # userSignIn - Stage Environment
  userSignInStage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/userSignIn
      Handler: index.handler
      FunctionName: "userSignIn-stage"
      Description: "userSignIn - STAGE"
      Role: !GetAtt lambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 60
      MemorySize: 512
      Layers:
        - !Ref CommonLayer
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/stage/userSignIn"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt StageDatabase.Endpoint.Address
          DB_NAME: empbackendstage
          DB_USER: !Ref StageDBUserName
          DB_PASSWORD: !Ref StageDBPassword
          DB_PORT: !GetAtt StageDatabase.Endpoint.Port
          ENVIRONMENT: "stage"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "stage"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/stage/jwt-secret"
    Metadata:
      BuildMethod: nodejs18.x

  # userSignIn - Production Environment
  userSignInProd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/userSignIn
      Handler: index.handler
      FunctionName: "userSignIn-prod"
      Description: "userSignIn - PRODUCTION"
      Role: !GetAtt lambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 60
      MemorySize: 512
      Layers:
        - !Ref CommonLayer
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/prod/userSignIn"
            Method: POST
      Environment:
        Variables:
          DB_HOST: !GetAtt ProductionDatabase.Endpoint.Address
          DB_NAME: empbackendprod
          DB_USER: !Ref ProdDBUserName
          DB_PASSWORD: !Ref ProdDBPassword
          DB_PORT: !GetAtt ProductionDatabase.Endpoint.Port
          ENVIRONMENT: "prod"
          EMAIL_USER: "teamtech993@gmail.com"
          EMAIL_PASS: "Tech@2468"
          ADMIN_EMAIL: "jeeva7777@gmail.com"
          EMAIL_SERVICE: "gmail"
          NODE_ENV: "production"
          LIMIT: 20
          JWT_SECRET_PARAM: "/emp-backend/prod/jwt-secret"
    Metadata:
      BuildMethod: nodejs18.x

Outputs:
  UnifiedApiGatewayUrl:
    Description: "Unified API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayUrl"

  StageApiExample:
    Description: "Example Stage API endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/stage/userSignIn"
    Export:
      Name: !Sub "${AWS::StackName}-StageApiExample"

  ProdApiExample:
    Description: "Example Production API endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/prod/userSignIn"
    Export:
      Name: !Sub "${AWS::StackName}-ProdApiExample"

  StageDatabaseEndpoint:
    Description: "Stage database endpoint"
    Value: !GetAtt StageDatabase.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-StageDatabaseEndpoint"

  ProductionDatabaseEndpoint:
    Description: "Production database endpoint"
    Value: !GetAtt ProductionDatabase.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-ProductionDatabaseEndpoint"

  AllStageEndpoints:
    Description: "All Stage API endpoints"
    Value: !Sub |
      Stage Endpoints (All point to staging database):
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/stage/manageDonor
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/stage/manageNGO
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/stage/userSignIn
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/stage/manageDonations
      (... and all other functions under /stage/)

  AllProdEndpoints:
    Description: "All Production API endpoints"
    Value: !Sub |
      Production Endpoints (All point to production database):
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/prod/manageDonor
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/prod/manageNGO
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/prod/userSignIn
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/prod/manageDonations
      (... and all other functions under /prod/)
